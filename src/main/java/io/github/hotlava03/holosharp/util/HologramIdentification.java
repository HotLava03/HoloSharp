/*
 * Copyright (c) 2019 HotLava03.
 * Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package io.github.hotlava03.holosharp.util;

import com.gmail.filoghost.holographicdisplays.api.Hologram;
import com.gmail.filoghost.holographicdisplays.api.HologramsAPI;
import io.github.hotlava03.holosharp.HoloSharp;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.Set;


public class HologramIdentification {

    private static final FileConfiguration holograms = HoloSharp.holograms;

    public static void saveHologram(String player, Location location, String name, List<String> lineList) throws IOException {
        holograms.set("holograms." + player + "." + name + "." + "coordinates", location);
        holograms.set("holograms." + player + "." + name + "." + "lines", lineList);
        holograms.options().header("Please do not edit this file. To edit players' holograms use the in game provided admin commands. If something breaks contact the developer.");
        holograms.save(HoloSharp.file);
        HoloSharp.messages = YamlConfiguration.loadConfiguration(HoloSharp.file);
    }

    public static boolean hologramExists(Player player, String name) {
        return holograms.get("holograms." + player + "." + name + ".coordinates") == null;
    }

    public static Location deleteHologram(String player, String name) throws IOException {
        Location deletedHoloLocation = (Location) holograms.get("holograms." + player + "." + name + ".coordinates");
        if (holograms.get("holograms." + player + "." + name + ".coordinates") == null) return null;
        holograms.set("holograms." + player + "." + name, null);
        holograms.options().header("Please do not edit this file. To edit players' holograms use the in game provided admin commands. If something breaks contact the developer.");
        holograms.save(HoloSharp.file);
        HoloSharp.messages = YamlConfiguration.loadConfiguration(HoloSharp.file);
        return deletedHoloLocation;
    }

    public static int deleteAll(List<Chunk> chunks) {
        int i = 0;
        Set<String> playerKeys = holograms.getConfigurationSection("holograms").getKeys(false);
        for (Chunk chunk : chunks) {
            for (String player : playerKeys) {
                Set<String> names;
                try {
                    names = holograms.getConfigurationSection("holograms." + player).getKeys(false);
                } catch (NullPointerException e) {
                    continue;
                }
                if (names == null || names.isEmpty()){
                    continue;
                }
                for (String name : names) {
                    Location location = ((Location) holograms.get("holograms." + player + "." + name + ".coordinates"));
                    if (chunk.equals(location.getChunk())) {
                        try {
                            deleteHologram(player, name);
                        } catch (IOException e) {
                            e.printStackTrace();
                            continue;
                        }
                        Collection<Hologram> list = HologramsAPI.getHolograms(HoloSharp.getPlugin(HoloSharp.class));
                        for (Hologram holo : list) {
                            if (holo.getLocation().equals(location)) {
                                holo.clearLines();
                                holo.delete();
                                i++;
                            }
                        }
                    }
                }
            }
        }
        return i;
    }

    public static void addLine(Player player, String name, List<String> lineList) throws IOException {
        holograms.set("holograms." + player.getName() + "." + name + ".lines", lineList);
        holograms.save(HoloSharp.file);
        HoloSharp.messages = YamlConfiguration.loadConfiguration(HoloSharp.file);
    }

    public static void removeLine(String player, String name, int line) throws IOException {
        List<String> lineList = holograms.getStringList("holograms." + player + "." + name + ".lines");
        lineList.remove(line);
        holograms.set("holograms." + player + "." + name + ".lines", lineList);
        holograms.save(HoloSharp.file);
        HoloSharp.messages = YamlConfiguration.loadConfiguration(HoloSharp.file);
    }

    public static Location getLocation(String player, String name) {
        return (Location) holograms.get("holograms." + player + "." + name + ".coordinates");
    }

    public static boolean transfer(String name, String oldPlayer, String newPlayer) throws IOException {
        Location location = (Location) holograms.get("holograms." + oldPlayer + "." + name + ".coordinates");
        List<String> lines = holograms.getStringList("holograms." + oldPlayer + "." + name + ".lines");
        if (holograms.get("holograms." + oldPlayer + "." + name + ".coordinates") == null) return false;
        holograms.set("holograms." + oldPlayer + "." + name, null);
        holograms.set("holograms." + newPlayer + "." + name + ".coordinates", location);
        holograms.set("holograms." + newPlayer + "." + name + ".lines", lines);
        holograms.save(HoloSharp.file);
        HoloSharp.messages = YamlConfiguration.loadConfiguration(HoloSharp.file);
        return true;
    }
}
